{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/UserQuestions.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport host from \"../utils/host\";\n\nvar UserQuestions = function UserQuestions(_ref) {\n  _s();\n\n  var uuid = _ref.uuid;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var fetchUserPosts = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(host, \"/users/\").concat(uuid, \"/posts?page=\").concat(page, \"&limit=20\"));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchUserPosts(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _useQuery = useQuery([\"user-posts\", page], function () {\n    return fetchUserPosts(page);\n  }, {\n    keepPreviousData: true,\n    cacheTime: 0\n  }),\n      isLoading = _useQuery.isLoading,\n      isError = _useQuery.isError,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      isPreviousData = _useQuery.isPreviousData;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: uuid\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(UserQuestions, \"B8AHcuIhDtcfT64L9EclU84Jm5E=\", false, function () {\n  return [useQuery];\n});\n\n_c = UserQuestions;\nexport default UserQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserQuestions\");","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/UserQuestions.tsx"],"names":["React","useState","useQuery","host","UserQuestions","uuid","page","setPage","fetchUserPosts","fetch","res","json","keepPreviousData","cacheTime","isLoading","isError","error","data","isPreviousData"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,eAAjB;;AAcA,IAAMC,aAA8B,GAAG,SAAjCA,aAAiC,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBAC3BJ,QAAQ,CAAS,CAAT,CADmB;AAAA,MAC5CK,IAD4C;AAAA,MACtCC,OADsC;;AAGnD,MAAMC,cAAc;AAAA,yEAAG,iBAAOF,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACHG,KAAK,WAClBN,IADkB,oBACJE,IADI,yBACeC,IADf,eADF;;AAAA;AACfI,cAAAA,GADe;AAAA;AAAA,qBAIRA,GAAG,CAACC,IAAJ,EAJQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdH,cAAc;AAAA;AAAA;AAAA,KAApB;;AAHmD,kBAUSN,QAAQ,CAClE,CAAC,YAAD,EAAeI,IAAf,CADkE,EAElE;AAAA,WAAME,cAAc,CAACF,IAAD,CAApB;AAAA,GAFkE,EAGlE;AAAEM,IAAAA,gBAAgB,EAAE,IAApB;AAA0BC,IAAAA,SAAS,EAAE;AAArC,GAHkE,CAVjB;AAAA,MAU3CC,SAV2C,aAU3CA,SAV2C;AAAA,MAUhCC,OAVgC,aAUhCA,OAVgC;AAAA,MAUvBC,KAVuB,aAUvBA,KAVuB;AAAA,MAUhBC,IAVgB,aAUhBA,IAVgB;AAAA,MAUVC,cAVU,aAUVA,cAVU;;AAgBnD,sBAAO;AAAA,cAAMb;AAAN;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAjBD;;GAAMD,a;UAUwDF,Q;;;KAVxDE,a;AAmBN,eAAeA,aAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../utils/host\";\n\ntype UserType = {\n  uuid: string;\n  username: string;\n  email: string;\n  verified: boolean;\n  reputation: number;\n};\n\ninterface Props {\n  uuid: string;\n}\n\nconst UserQuestions: React.FC<Props> = ({ uuid }) => {\n  const [page, setPage] = useState<number>(1);\n\n  const fetchUserPosts = async (page: number) => {\n    const res = await fetch(\n      `${host}/users/${uuid}/posts?page=${page}&limit=20`\n    );\n    return await res.json();\n  };\n\n  const { isLoading, isError, error, data, isPreviousData } = useQuery(\n    [\"user-posts\", page],\n    () => fetchUserPosts(page),\n    { keepPreviousData: true, cacheTime: 0 }\n  );\n\n  return <div>{uuid}</div>;\n};\n\nexport default UserQuestions;\n"]},"metadata":{},"sourceType":"module"}