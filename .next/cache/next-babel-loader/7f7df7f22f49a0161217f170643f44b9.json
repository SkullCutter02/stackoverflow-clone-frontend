{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx\";\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../utils/host\";\n\nconst CommunityPostPage = () => {\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const router = useRouter();\n  const {\n    community\n  } = router.query;\n\n  const fetchPosts = async page => {\n    const res = await fetch(`${host}/communities/${community}/posts?page=${page}&limit=10`);\n    return await res.json();\n  };\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData\n  } = useQuery([\"community-posts\", page], () => fetchPosts(page), {\n    keepPreviousData: true\n  });\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this) : data === null || data === void 0 ? void 0 : data.posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)]\n      }, post.uuid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CommunityPostPage;","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx"],"names":["React","useState","useRouter","useQuery","host","CommunityPostPage","page","setPage","router","community","query","fetchPosts","res","fetch","json","isLoading","isError","error","data","isFetching","isPreviousData","keepPreviousData","console","log","message","posts","map","post","title","body","uuid"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,kBAAjB;;AAGA,MAAMC,iBAA2B,GAAG,MAAM;AACxC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAS,CAAT,CAAhC;AACA,QAAMO,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAgBD,MAAM,CAACE,KAA7B;;AAEA,QAAMC,UAAU,GAAG,MAAOL,IAAP,IAAwB;AACzC,UAAMM,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAET,IAAK,gBAAeK,SAAU,eAAcH,IAAK,WAD/B,CAAvB;AAGA,WAAO,MAAMM,GAAG,CAACE,IAAJ,EAAb;AACD,GALD;;AAOA,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFjB,QAAQ,CACV,CAAC,iBAAD,EAAoBG,IAApB,CADU,EAEV,MAAMK,UAAU,CAACL,IAAD,CAFN,EAGV;AACEe,IAAAA,gBAAgB,EAAE;AADpB,GAHU,CAPZ;AAeAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAA,gBACGH,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ,GAENC,OAAO,gBACT;AAAA,kBAAMC,KAAK,CAACO;AAAZ;AAAA;AAAA;AAAA;AAAA,cADS,GAGTN,IAHS,aAGTA,IAHS,uBAGTA,IAAI,CAAEO,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,iBACd;AAAA,gCACE;AAAA,oBAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAUF,IAAI,CAACG,IAAf;AAAA;AAAA;AAAA;AAAA,cADF;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/CD;;AAiDA,eAAezB,iBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../../utils/host\";\nimport { CommunityPostsType } from \"../../utils/types/postType\";\n\nconst CommunityPostPage: React.FC = () => {\n  const [page, setPage] = useState<number>(1);\n  const router = useRouter();\n  const { community } = router.query;\n\n  const fetchPosts = async (page: number) => {\n    const res = await fetch(\n      `${host}/communities/${community}/posts?page=${page}&limit=10`\n    );\n    return await res.json();\n  };\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData,\n  } = useQuery<CommunityPostsType, Error>(\n    [\"community-posts\", page],\n    () => fetchPosts(page),\n    {\n      keepPreviousData: true,\n    }\n  );\n\n  console.log(data);\n\n  return (\n    <React.Fragment>\n      <div>\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>{error.message}</div>\n        ) : (\n          data?.posts.map((post) => (\n            <div key={post.uuid}>\n              <p>{post.title}</p>\n              <p>{post.body}</p>\n            </div>\n          ))\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CommunityPostPage;\n"]},"metadata":{},"sourceType":"module"}