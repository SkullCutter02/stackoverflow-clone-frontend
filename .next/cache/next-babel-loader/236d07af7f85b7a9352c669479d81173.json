{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/Communities.tsx\";\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport host from \"../utils/host\";\n\nconst Communities = () => {\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n\n  const fetchCommunities = (page = 1) => fetch(`${host}/communities?page=${page}&limit=20`);\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData\n  } = useQuery([\"communities\", page], () => fetchCommunities(page), {\n    keepPreviousData: true\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"communities-container\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Communities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Communities;","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/Communities.tsx"],"names":["React","useState","useQuery","host","Communities","page","setPage","fetchCommunities","fetch","isLoading","isError","error","data","isFetching","isPreviousData","keepPreviousData","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,eAAjB;;AAWA,MAAMC,WAAqB,GAAG,MAAM;AAClC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAS,CAAT,CAAhC;;AAEA,QAAMM,gBAAgB,GAAG,CAACF,IAAY,GAAG,CAAhB,KACvBG,KAAK,CAAE,GAAEL,IAAK,qBAAoBE,IAAK,WAAlC,CADP;;AAGA,QAAM;AACJI,IAAAA,SADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFZ,QAAQ,CACV,CAAC,aAAD,EAAgBG,IAAhB,CADU,EAEV,MAAME,gBAAgB,CAACF,IAAD,CAFZ,EAGV;AACEU,IAAAA,gBAAgB,EAAE;AADpB,GAHU,CAPZ;AAeA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,gBACGN,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ,GAENC,OAAO,gBACT;AAAA,8BAAaC,KAAK,CAACK,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cADS,gBAGT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAlCD;;AAoCA,eAAeZ,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../utils/host\";\n\ntype CommunityType = {\n  uuid: string;\n  name: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n  fetchCommunities: () => Promise<void>;\n};\n\nconst Communities: React.FC = () => {\n  const [page, setPage] = useState<number>(1);\n\n  const fetchCommunities = (page: number = 1) =>\n    fetch(`${host}/communities?page=${page}&limit=20`);\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData,\n  } = useQuery<CommunityType, Error>(\n    [\"communities\", page],\n    () => fetchCommunities(page),\n    {\n      keepPreviousData: true,\n    }\n  );\n\n  return (\n    <React.Fragment>\n      <div className=\"communities-container\">\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>Error: {error.message}</div>\n        ) : (\n          <div>Communities</div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Communities;\n"]},"metadata":{},"sourceType":"module"}