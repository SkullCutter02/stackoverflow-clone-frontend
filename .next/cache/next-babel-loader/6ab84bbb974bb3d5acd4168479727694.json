{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../utils/host\";\n\nvar CommunityPostPage = function CommunityPostPage(_ref) {\n  _s();\n\n  var community = _ref.community;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var router = useRouter();\n\n  var fetchPosts = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(host, \"/communities/\").concat(community, \"/posts?page=\").concat(page, \"&limit=10\"));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              return _context.abrupt(\"return\", data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchPosts(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _useQuery = useQuery([\"community-posts\", page], function () {\n    return fetchPosts(page);\n  }, {\n    keepPreviousData: true\n  }),\n      isLoading = _useQuery.isLoading,\n      isError = _useQuery.isError,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      isFetching = _useQuery.isFetching,\n      isPreviousData = _useQuery.isPreviousData;\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, _this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, _this) : data.posts.map(function (post) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, _this)]\n        }, post.uuid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CommunityPostPage, \"9gEzCP8SArDCuDONXkPe9V/Zf84=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = CommunityPostPage;\nexport var __N_SSP = true;\nexport default CommunityPostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommunityPostPage\");","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx"],"names":["React","useState","useRouter","useQuery","host","CommunityPostPage","community","page","setPage","router","fetchPosts","fetch","res","json","data","keepPreviousData","isLoading","isError","error","isFetching","isPreviousData","message","posts","map","post","title","body","user","username","uuid"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,OAAOC,IAAP,MAAiB,kBAAjB;;AAOA,IAAMC,iBAAkC,GAAG,SAArCA,iBAAqC,OAAmB;AAAA;;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,kBACpCL,QAAQ,CAAS,CAAT,CAD4B;AAAA,MACrDM,IADqD;AAAA,MAC/CC,OAD+C;;AAE5D,MAAMC,MAAM,GAAGP,SAAS,EAAxB;;AAEA,MAAMQ,UAAU;AAAA,yEAAG,iBAAOH,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACCI,KAAK,WAClBP,IADkB,0BACEE,SADF,yBAC0BC,IAD1B,eADN;;AAAA;AACXK,cAAAA,GADW;AAAA;AAAA,qBAIsBA,GAAG,CAACC,IAAJ,EAJtB;;AAAA;AAIXC,cAAAA,IAJW;AAAA,+CAKVA,IALU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVJ,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAJ4D,kBAmBxDP,QAAQ,CACV,CAAC,iBAAD,EAAoBI,IAApB,CADU,EAEV;AAAA,WAAMG,UAAU,CAACH,IAAD,CAAhB;AAAA,GAFU,EAGV;AACEQ,IAAAA,gBAAgB,EAAE;AADpB,GAHU,CAnBgD;AAAA,MAa1DC,SAb0D,aAa1DA,SAb0D;AAAA,MAc1DC,OAd0D,aAc1DA,OAd0D;AAAA,MAe1DC,KAf0D,aAe1DA,KAf0D;AAAA,MAgB1DJ,IAhB0D,aAgB1DA,IAhB0D;AAAA,MAiB1DK,UAjB0D,aAiB1DA,UAjB0D;AAAA,MAkB1DC,cAlB0D,aAkB1DA,cAlB0D;;AA2B5D,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAA,gBACGJ,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADQ,GAENC,OAAO,gBACT;AAAA,kBAAMC,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,eADS,GAGTP,IAAI,CAACQ,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD;AAAA,4BACb;AAAA,kCACE;AAAA,sBAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA,sBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE;AAAA,sBAAIF,IAAI,CAACG,IAAL,CAAUC;AAAd;AAAA;AAAA;AAAA;AAAA,mBAHF;AAAA,WAAUJ,IAAI,CAACK,IAAf;AAAA;AAAA;AAAA;AAAA,iBADa;AAAA,OAAf;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAmBD,CA9CD;;GAAMxB,iB;UAEWH,S,EAiBXC,Q;;;KAnBAE,iB;;AAwDN,eAAeA,iBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\nimport { GetServerSideProps } from \"next\";\n\nimport host from \"../../utils/host\";\nimport { CommunityPostsType } from \"../../utils/types/postType\";\n\ninterface Props {\n  community: string;\n}\n\nconst CommunityPostPage: React.FC<Props> = ({ community }) => {\n  const [page, setPage] = useState<number>(1);\n  const router = useRouter();\n\n  const fetchPosts = async (page: number) => {\n    const res = await fetch(\n      `${host}/communities/${community}/posts?page=${page}&limit=10`\n    );\n    const data: CommunityPostsType = await res.json();\n    return data;\n  };\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData,\n  } = useQuery<CommunityPostsType, Error>(\n    [\"community-posts\", page],\n    () => fetchPosts(page),\n    {\n      keepPreviousData: true,\n    }\n  );\n\n  return (\n    <React.Fragment>\n      <div>\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>{error.message}</div>\n        ) : (\n          data.posts.map((post) => (\n            <div key={post.uuid}>\n              <p>{post.title}</p>\n              <p>{post.body}</p>\n              <p>{post.user.username}</p>\n            </div>\n          ))\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  return {\n    props: {\n      community: context.params.community,\n    },\n  };\n};\n\nexport default CommunityPostPage;\n"]},"metadata":{},"sourceType":"module"}