{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/[uuid]/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../../utils/host\";\n\nvar PostPage = function PostPage() {\n  _s();\n\n  var router = useRouter();\n  var _router$query = router.query,\n      community = _router$query.community,\n      uuid = _router$query.uuid;\n\n  var fetchCommunities = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(host, \"/communities/\").concat(community));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              return _context.abrupt(\"return\", data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchCommunities() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useQuery = useQuery([\"check-community\"], function () {\n    return fetchCommunities();\n  }, {\n    cacheTime: 0\n  }),\n      isLoading = _useQuery.isLoading,\n      isError = _useQuery.isError,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, _this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, _this) : data.uuid ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: uuid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Community doesn't exist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PostPage, \"BkUCzQT5eDTRg+sj5RvvXd45SrU=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = PostPage;\nexport default PostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/[uuid]/index.tsx"],"names":["React","useRouter","useQuery","host","PostPage","router","query","community","uuid","fetchCommunities","fetch","res","json","data","cacheTime","isLoading","isError","error","message"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,qBAAjB;;AAUA,IAAMC,QAAkB,GAAG,SAArBA,QAAqB,GAAM;AAAA;;AAC/B,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AAD+B,sBAEHI,MAAM,CAACC,KAFJ;AAAA,MAEvBC,SAFuB,iBAEvBA,SAFuB;AAAA,MAEZC,IAFY,iBAEZA,IAFY;;AAI/B,MAAMC,gBAAgB;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACLC,KAAK,WAAIP,IAAJ,0BAAwBI,SAAxB,EADA;;AAAA;AACjBI,cAAAA,GADiB;AAAA;AAAA,qBAEWA,GAAG,CAACC,IAAJ,EAFX;;AAAA;AAEjBC,cAAAA,IAFiB;AAAA,+CAGhBA,IAHgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBJ,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAJ+B,kBAUaP,QAAQ,CAClD,CAAC,iBAAD,CADkD,EAElD;AAAA,WAAMO,gBAAgB,EAAtB;AAAA,GAFkD,EAGlD;AAAEK,IAAAA,SAAS,EAAE;AAAb,GAHkD,CAVrB;AAAA,MAUvBC,SAVuB,aAUvBA,SAVuB;AAAA,MAUZC,OAVY,aAUZA,OAVY;AAAA,MAUHC,KAVG,aAUHA,KAVG;AAAA,MAUIJ,IAVJ,aAUIA,IAVJ;;AAgB/B,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAA,gBACGE,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADQ,GAENC,OAAO,gBACT;AAAA,kBAAMC,KAAK,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA,eADS,GAEPL,IAAI,CAACL,IAAL,gBACF;AAAA,kBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,eADE,gBAGF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAeD,CA/BD;;GAAMJ,Q;UACWH,S,EAS6BC,Q;;;KAVxCE,Q;AAiCN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../../../utils/host\";\n\ntype CommunityType = {\n  uuid: string;\n  name: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nconst PostPage: React.FC = () => {\n  const router = useRouter();\n  const { community, uuid } = router.query;\n\n  const fetchCommunities = async () => {\n    const res = await fetch(`${host}/communities/${community}`);\n    const data: CommunityType = await res.json();\n    return data;\n  };\n\n  const { isLoading, isError, error, data } = useQuery<CommunityType, Error>(\n    [\"check-community\"],\n    () => fetchCommunities(),\n    { cacheTime: 0 }\n  );\n\n  return (\n    <React.Fragment>\n      <main>\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>{error.message}</div>\n        ) : data.uuid ? (\n          <div>{uuid}</div>\n        ) : (\n          <div>Community doesn't exist</div>\n        )}\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}