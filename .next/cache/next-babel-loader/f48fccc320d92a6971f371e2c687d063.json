{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSortDown, faSortUp } from \"@fortawesome/free-solid-svg-icons\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport hljs from \"highlight.js\";\nimport { useRouter } from \"next/router\";\nimport * as css from \"../utils/cssVariables\";\nimport AskedBy from \"./AskedBy\";\nimport { UserContext } from \"../context/UserContext\";\nimport host from \"../utils/host\";\nimport { updateVote, getCookie } from \"../utils/functions\";\nimport OPActions from \"./OPActions\";\nimport EditAnswer from \"./EditAnswer\";\n\nconst Answer = ({\n  comment\n}) => {\n  var _userContext$user, _userContext$user2, _userContext$user3;\n\n  const {\n    0: votes,\n    1: setVotes\n  } = useState(comment.votes);\n  const {\n    0: upvoteColor,\n    1: setUpvoteColor\n  } = useState(\"grey\");\n  const {\n    0: downvoteColor,\n    1: setDownvoteColor\n  } = useState(\"grey\");\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const userContext = useContext(UserContext);\n  const router = useRouter();\n  const style = {\n    cursor: \"pointer\"\n  };\n  useEffect(() => {\n    const pres = document.querySelectorAll(\"pre\");\n\n    for (let i = 0; i < pres.length; i++) {\n      if (!editMode) {\n        hljs.highlightBlock(pres[i]);\n        pres[i].classList.remove(\"plaintext\");\n      } else {\n        pres[i].classList.add(\"plaintext\");\n      }\n    }\n  }, [editMode]);\n  useEffect(() => {\n    if (userContext.user) {\n      fetch(`${host}/posts/comments/${comment.uuid}/vote/status`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userUuid: userContext.user.uuid\n        })\n      }).then(res => res.json()).then(data => {\n        if (data.status) {\n          if (data.type === \"upvote\") {\n            setUpvoteColor(css.upvote);\n          } else if (data.type === \"downvote\") {\n            setDownvoteColor(css.downvote);\n          }\n        }\n      });\n    }\n  }, [userContext]);\n\n  const vote = async voteType => {\n    if (userContext.user) {\n      if (userContext.user.uuid !== comment.user.uuid) {\n        fetch(`${host}/posts/comments/${comment.uuid}/vote/status`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            userUuid: userContext.user.uuid\n          })\n        }).then(res => res.json()).then(data => updateVote(data, voteType, setVotes, setUpvoteColor, setDownvoteColor, votes, css.upvote, css.downvote));\n        await fetch(`${host}/posts/comments/${comment.uuid}/vote`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${getCookie(\"token\")}`\n          },\n          body: JSON.stringify({\n            userUuid: userContext.user.uuid,\n            voteType: voteType\n          })\n        });\n      } else {\n        alert(\"You can't vote on your own comment!\");\n      }\n    } else {\n      await router.push(`/auth/signup?redirect=${router.asPath}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]]) + \" \" + \"answer-container\",\n      children: !editMode ? /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]]) + \" \" + \"votes\",\n          children: [/*#__PURE__*/_jsx(FontAwesomeIcon, {\n            icon: faSortUp,\n            color: upvoteColor,\n            style: style,\n            size: \"2x\",\n            onClick: () => vote(\"upvote\")\n          }), /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              color: \"#c6c6c6\",\n              margin: \"-8px 0\"\n            },\n            className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]]) + \" \" + \"vote-count\",\n            children: votes\n          }), /*#__PURE__*/_jsx(FontAwesomeIcon, {\n            icon: faSortDown,\n            color: downvoteColor,\n            style: style,\n            size: \"2x\",\n            onClick: () => vote(\"downvote\")\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]]) + \" \" + \"main-answer-body\",\n          children: [/*#__PURE__*/_jsx(ReactMarkdown, {\n            className: \"preview answer-pre\",\n            source: comment.body,\n            plugins: [remarkGfm]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]]) + \" \" + \"below\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]]) + \" \" + \"user\",\n              children: /*#__PURE__*/_jsx(AskedBy, {\n                type: \"answered\",\n                username: comment.user.username,\n                createdAt: comment.createdAt,\n                postUuid: comment.user.uuid,\n                userUuid: userContext === null || userContext === void 0 ? void 0 : (_userContext$user = userContext.user) === null || _userContext$user === void 0 ? void 0 : _userContext$user.uuid,\n                reputation: comment.user.reputation\n              })\n            }), comment.user.uuid === (userContext === null || userContext === void 0 ? void 0 : (_userContext$user2 = userContext.user) === null || _userContext$user2 === void 0 ? void 0 : _userContext$user2.uuid) || (userContext === null || userContext === void 0 ? void 0 : (_userContext$user3 = userContext.user) === null || _userContext$user3 === void 0 ? void 0 : _userContext$user3.role) === \"god\" ? /*#__PURE__*/_jsx(\"div\", {\n              className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]]) + \" \" + \"op-actions\",\n              children: /*#__PURE__*/_jsx(OPActions, {\n                uuid: comment.uuid,\n                type: \"answer\",\n                setEditMode: setEditMode\n              })\n            }) : /*#__PURE__*/_jsx(\"div\", {\n              className: _JSXStyle.dynamic([[\"4250113428\", [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"]]])\n            })]\n          })]\n        })]\n      }) : /*#__PURE__*/_jsx(EditAnswer, {\n        setEditMode: setEditMode,\n        comment: comment\n      })\n    }), /*#__PURE__*/_jsx(_JSXStyle, {\n      id: \"4250113428\",\n      dynamic: [css.floatingPostBackground, !editMode ? \"flex\" : \"block\"],\n      children: [`.answer-container.__jsx-style-dynamic-selector{width:100%;margin-bottom:30px;padding:5px 5px 20px;border-radius:10px;background:${css.floatingPostBackground};display:${!editMode ? \"flex\" : \"block\"};}`, \".below.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row-reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:-5px;}\", \".votes.__jsx-style-dynamic-selector{width:5%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;margin-top:14px;}\", \".op-actions.__jsx-style-dynamic-selector{width:100px;}\", \".main-answer-body.__jsx-style-dynamic-selector{width:95%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}\"]\n    })]\n  });\n};\n\nexport default Answer;","map":null,"metadata":{},"sourceType":"module"}