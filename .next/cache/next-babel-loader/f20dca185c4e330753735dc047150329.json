{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../utils/host\";\n\nvar CommunityPostPage = function CommunityPostPage() {\n  _s();\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var community = useRouter().query.community;\n\n  var fetchPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(host, \"/communities/\").concat(community, \"/posts?page=\").concat(page, \"&limit=10\"));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              return _context.abrupt(\"return\", data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchPosts(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useQuery = useQuery([\"community-posts\", page], function () {\n    return fetchPosts(page);\n  }, {\n    keepPreviousData: true\n  }),\n      isLoading = _useQuery.isLoading,\n      isError = _useQuery.isError,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      isFetching = _useQuery.isFetching,\n      isPreviousData = _useQuery.isPreviousData;\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, _this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, _this) :\n      /*#__PURE__*/\n      // data.posts.map((post) => (\n      //   <div key={post.uuid}>\n      //     <p>{post.title}</p>\n      //     <p>{post.body}</p>\n      //     <p>{post.user.username}</p>\n      //   </div>\n      // ))\n      _jsxDEV(\"div\", {\n        children: \"d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CommunityPostPage, \"NElkVLaTo5pxq8JqHjRBAPKsf2k=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = CommunityPostPage;\nexport default CommunityPostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommunityPostPage\");","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx"],"names":["React","useState","useRouter","useQuery","host","CommunityPostPage","page","setPage","community","query","fetchPosts","fetch","res","json","data","keepPreviousData","isLoading","isError","error","isFetching","isPreviousData","message"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,kBAAjB;;AAGA,IAAMC,iBAA2B,GAAG,SAA9BA,iBAA8B,GAAM;AAAA;;AAAA,kBAChBJ,QAAQ,CAAS,CAAT,CADQ;AAAA,MACjCK,IADiC;AAAA,MAC3BC,OAD2B;;AAAA,MAEhCC,SAFgC,GAElBN,SAAS,GAAGO,KAFM,CAEhCD,SAFgC;;AAIxC,MAAME,UAAU;AAAA,wEAAG,iBAAOJ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACCK,KAAK,WAClBP,IADkB,0BACEI,SADF,yBAC0BF,IAD1B,eADN;;AAAA;AACXM,cAAAA,GADW;AAAA;AAAA,qBAIsBA,GAAG,CAACC,IAAJ,EAJtB;;AAAA;AAIXC,cAAAA,IAJW;AAAA,+CAKVA,IALU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVJ,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAJwC,kBAmBpCP,QAAQ,CACV,CAAC,iBAAD,EAAoBG,IAApB,CADU,EAEV;AAAA,WAAMI,UAAU,CAACJ,IAAD,CAAhB;AAAA,GAFU,EAGV;AACES,IAAAA,gBAAgB,EAAE;AADpB,GAHU,CAnB4B;AAAA,MAatCC,SAbsC,aAatCA,SAbsC;AAAA,MActCC,OAdsC,aActCA,OAdsC;AAAA,MAetCC,KAfsC,aAetCA,KAfsC;AAAA,MAgBtCJ,IAhBsC,aAgBtCA,IAhBsC;AAAA,MAiBtCK,UAjBsC,aAiBtCA,UAjBsC;AAAA,MAkBtCC,cAlBsC,aAkBtCA,cAlBsC;;AA2BxC,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAA,gBACGJ,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADQ,GAENC,OAAO,gBACT;AAAA,kBAAMC,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,eADS;AAAA;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAoBD,CA/CD;;GAAMhB,iB;UAEkBH,S,EAiBlBC,Q;;;KAnBAE,iB;AAiDN,eAAeA,iBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../../utils/host\";\nimport { CommunityPostsType } from \"../../utils/types/postType\";\n\nconst CommunityPostPage: React.FC = () => {\n  const [page, setPage] = useState<number>(1);\n  const { community } = useRouter().query;\n\n  const fetchPosts = async (page: number) => {\n    const res = await fetch(\n      `${host}/communities/${community}/posts?page=${page}&limit=10`\n    );\n    const data: CommunityPostsType = await res.json();\n    return data;\n  };\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData,\n  } = useQuery<CommunityPostsType, Error>(\n    [\"community-posts\", page],\n    () => fetchPosts(page),\n    {\n      keepPreviousData: true,\n    }\n  );\n\n  return (\n    <React.Fragment>\n      <div>\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>{error.message}</div>\n        ) : (\n          // data.posts.map((post) => (\n          //   <div key={post.uuid}>\n          //     <p>{post.title}</p>\n          //     <p>{post.body}</p>\n          //     <p>{post.user.username}</p>\n          //   </div>\n          // ))\n          <div>d</div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CommunityPostPage;\n"]},"metadata":{},"sourceType":"module"}