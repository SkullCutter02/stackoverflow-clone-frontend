{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/Communities.tsx\";\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport host from \"../utils/host\";\n\nconst Communities = () => {\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n\n  const fetchCommunities = (page = 1) => fetch(`${host}/communities?page=${page}&limit=20`);\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData\n  } = useQuery([\"communities\", page], () => fetchCommunities(page), {\n    keepPreviousData: true\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Communities;","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/Communities.tsx"],"names":["React","useState","useQuery","host","Communities","page","setPage","fetchCommunities","fetch","isLoading","isError","error","data","isFetching","isPreviousData","keepPreviousData"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,eAAjB;;AAEA,MAAMC,WAAqB,GAAG,MAAM;AAClC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAS,CAAT,CAAhC;;AAEA,QAAMM,gBAAgB,GAAG,CAACF,IAAY,GAAG,CAAhB,KACvBG,KAAK,CAAE,GAAEL,IAAK,qBAAoBE,IAAK,WAAlC,CADP;;AAGA,QAAM;AACJI,IAAAA,SADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFZ,QAAQ,CAAC,CAAC,aAAD,EAAgBG,IAAhB,CAAD,EAAwB,MAAME,gBAAgB,CAACF,IAAD,CAA9C,EAAsD;AAChEU,IAAAA,gBAAgB,EAAE;AAD8C,GAAtD,CAPZ;AAWA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;AAoBA,eAAeX,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../utils/host\";\n\nconst Communities: React.FC = () => {\n  const [page, setPage] = useState<number>(1);\n\n  const fetchCommunities = (page: number = 1) =>\n    fetch(`${host}/communities?page=${page}&limit=20`);\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData,\n  } = useQuery([\"communities\", page], () => fetchCommunities(page), {\n    keepPreviousData: true,\n  });\n\n  return <React.Fragment>Hello</React.Fragment>;\n};\n\nexport default Communities;\n"]},"metadata":{},"sourceType":"module"}