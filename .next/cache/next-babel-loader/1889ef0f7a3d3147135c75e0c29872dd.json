{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSortUp, faSortDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { useRouter } from \"next/router\";\nimport hljs from \"highlight.js\";\nimport { getCookie, updateVote } from \"../utils/functions\";\nimport host from \"../utils/host\";\nimport { UserContext } from \"../context/UserContext\";\nimport AskedBy from \"./AskedBy\";\nimport Tag from \"./Tag\";\nimport * as css from \"../utils/cssVariables\";\nimport OPActions from \"./OPActions\";\n\nvar Question = function Question(_ref) {\n  var _userContext$user, _userContext$user2, _userContext$user3;\n\n  var question = _ref.question,\n      setEditMode = _ref.setEditMode,\n      editMode = _ref.editMode;\n\n  var _useState = useState(question.votes),\n      votes = _useState[0],\n      setVotes = _useState[1];\n\n  var _useState2 = useState(\"grey\"),\n      upvoteColor = _useState2[0],\n      setUpvoteColor = _useState2[1];\n\n  var _useState3 = useState(\"grey\"),\n      downvoteColor = _useState3[0],\n      setDownvoteColor = _useState3[1];\n\n  var userContext = useContext(UserContext);\n  var router = useRouter();\n  var upvote = css.upvote;\n  var downvote = css.downvote;\n  var style = {\n    cursor: \"pointer\"\n  };\n  useEffect(function () {\n    if (userContext.user) {\n      fetch(\"\".concat(host, \"/posts/\").concat(question.uuid, \"/vote/status\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userUuid: userContext.user.uuid\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.status) {\n          if (data.type === \"upvote\") {\n            setUpvoteColor(upvote);\n          } else if (data.type === \"downvote\") {\n            setDownvoteColor(downvote);\n          }\n        }\n      });\n    }\n  }, [userContext]);\n  useEffect(function () {\n    var pres = document.querySelectorAll(\"pre\");\n\n    if (!editMode) {\n      for (var i = 0; i < pres.length; i++) {\n        pres[i].classList.remove(\"plaintext\");\n        hljs.highlightBlock(pres[i]);\n      }\n    } else {\n      for (var _i = 0; _i < pres.length; _i++) {\n        pres[_i].classList.add(\"plaintext\");\n      }\n    }\n  }, [editMode]);\n\n  var vote = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(voteType) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!userContext.user) {\n                _context.next = 10;\n                break;\n              }\n\n              if (!(userContext.user.uuid !== question.user.uuid)) {\n                _context.next = 7;\n                break;\n              }\n\n              fetch(\"\".concat(host, \"/posts/\").concat(question.uuid, \"/vote/status\"), {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  userUuid: userContext.user.uuid\n                })\n              }).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                return updateVote(data, voteType, setVotes, setUpvoteColor, setDownvoteColor, votes, upvote, downvote);\n              });\n              _context.next = 5;\n              return fetch(\"\".concat(host, \"/posts/\").concat(question.uuid, \"/vote\"), {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Authorization: \"Bearer \".concat(getCookie(\"token\"))\n                },\n                body: JSON.stringify({\n                  userUuid: userContext.user.uuid,\n                  voteType: voteType\n                })\n              });\n\n            case 5:\n              _context.next = 8;\n              break;\n\n            case 7:\n              alert(\"You can't vote on your own post!\");\n\n            case 8:\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return router.push(\"/auth/signup?redirect=\".concat(router.asPath));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function vote(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"main\", {\n      className: \"jsx-268140291\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"jsx-268140291\" + \" \" + \"question-container\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"jsx-268140291\" + \" \" + \"main\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"jsx-268140291\" + \" \" + \"votes\",\n            children: [/*#__PURE__*/_jsx(FontAwesomeIcon, {\n              icon: faSortUp,\n              color: upvoteColor,\n              style: style,\n              size: \"2x\",\n              onClick: function onClick() {\n                return vote(\"upvote\");\n              }\n            }), /*#__PURE__*/_jsx(\"p\", {\n              style: {\n                color: \"#c6c6c6\",\n                margin: \"-8px 0\"\n              },\n              className: \"jsx-268140291\" + \" \" + \"vote-count\",\n              children: votes\n            }), /*#__PURE__*/_jsx(FontAwesomeIcon, {\n              icon: faSortDown,\n              color: downvoteColor,\n              style: style,\n              size: \"2x\",\n              onClick: function onClick() {\n                return vote(\"downvote\");\n              }\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"jsx-268140291\" + \" \" + \"main-right\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"jsx-268140291\" + \" \" + \"post-body\",\n              children: /*#__PURE__*/_jsx(ReactMarkdown, {\n                className: \"preview post-body-mkd\",\n                source: question.body,\n                plugins: [remarkGfm]\n              })\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"jsx-268140291\" + \" \" + \"post-body-btm\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"jsx-268140291\" + \" \" + \"communities-container\",\n                children: question === null || question === void 0 ? void 0 : question.communities.slice(0, 4).map(function (community) {\n                  return /*#__PURE__*/_jsx(Tag, {\n                    name: community.name\n                  }, community.name);\n                })\n              }), /*#__PURE__*/_jsx(AskedBy, {\n                type: \"asked\",\n                username: question.user.username,\n                createdAt: question.createdAt,\n                postUuid: question.user.uuid,\n                userUuid: userContext === null || userContext === void 0 ? void 0 : (_userContext$user = userContext.user) === null || _userContext$user === void 0 ? void 0 : _userContext$user.uuid,\n                reputation: question.user.reputation\n              })]\n            }), question.user.uuid === (userContext === null || userContext === void 0 ? void 0 : (_userContext$user2 = userContext.user) === null || _userContext$user2 === void 0 ? void 0 : _userContext$user2.uuid) || (userContext === null || userContext === void 0 ? void 0 : (_userContext$user3 = userContext.user) === null || _userContext$user3 === void 0 ? void 0 : _userContext$user3.role) === \"god\" ? /*#__PURE__*/_jsx(OPActions, {\n              uuid: question.uuid,\n              type: \"question\",\n              setEditMode: setEditMode\n            }) : /*#__PURE__*/_jsx(\"div\", {\n              className: \"jsx-268140291\"\n            })]\n          })]\n        })\n      })\n    }), /*#__PURE__*/_jsx(_JSXStyle, {\n      id: \"268140291\",\n      children: [\".question-container.jsx-268140291{width:92%;margin:0 auto;}\", \".main.jsx-268140291{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:20px 0;}\", \".votes.jsx-268140291{width:5%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;margin:14px 20px;}\", \".main-right.jsx-268140291{width:95%;}\", \".post-body-btm.jsx-268140291{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:95%;margin-bottom:20px;}\", \".communities-container.jsx-268140291{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\"]\n    })]\n  });\n};\n\nexport default Question;","map":null,"metadata":{},"sourceType":"module"}