{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx\";\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../utils/host\";\n\nconst CommunityPostPage = ({\n  community\n}) => {\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n\n  const fetchPosts = async page => {\n    const res = await fetch(`${host}/communities/${community}/posts?page=${page}&limit=10`);\n    const data = await res.json();\n    return data;\n  };\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isPreviousData\n  } = useQuery([\"community-posts\", page], () => fetchPosts(page), {\n    keepPreviousData: true\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this) : data.posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.user.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this)]\n      }, post.uuid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-handlers\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"current-page\",\n        children: [\"Current Page: \", page]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage(old => Math.max(old - 1, 0)),\n        disabled: page === 1,\n        children: \"Previous Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          if (!isPreviousData && data.hasMore) {\n            setPage(old => old + 1);\n          }\n        },\n        disabled: isPreviousData || !data.hasMore,\n        children: \"Next Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  return {\n    props: {\n      community: context.params.community\n    }\n  };\n};\nexport default CommunityPostPage;","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx"],"names":["React","useState","useQuery","host","CommunityPostPage","community","page","setPage","fetchPosts","res","fetch","data","json","isLoading","isError","error","isPreviousData","keepPreviousData","message","posts","map","post","title","body","user","username","uuid","old","Math","max","hasMore","getServerSideProps","context","props","params"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,OAAOC,IAAP,MAAiB,kBAAjB;;AAOA,MAAMC,iBAAkC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC5D,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAS,CAAT,CAAhC;;AAEA,QAAMO,UAAU,GAAG,MAAOF,IAAP,IAAwB;AACzC,UAAMG,GAAG,GAAG,MAAMC,KAAK,CACpB,GAAEP,IAAK,gBAAeE,SAAU,eAAcC,IAAK,WAD/B,CAAvB;AAGA,UAAMK,IAAwB,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAvC;AACA,WAAOD,IAAP;AACD,GAND;;AAQA,QAAM;AAAEE,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,KAAtB;AAA6BJ,IAAAA,IAA7B;AAAmCK,IAAAA;AAAnC,MAAsDd,QAAQ,CAGlE,CAAC,iBAAD,EAAoBI,IAApB,CAHkE,EAGvC,MAAME,UAAU,CAACF,IAAD,CAHuB,EAGf;AACnDW,IAAAA,gBAAgB,EAAE;AADiC,GAHe,CAApE;AAOA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,gBACGJ,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ,GAENC,OAAO,gBACT;AAAA,kBAAMC,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,cADS,GAGTP,IAAI,CAACQ,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBACb;AAAA,gCACE;AAAA,oBAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,oBAAIF,IAAI,CAACG,IAAL,CAAUC;AAAd;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,SAAUJ,IAAI,CAACK,IAAf;AAAA;AAAA;AAAA;AAAA,cADF;AANJ;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA,qCAA2CpB,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,OAAO,EAAE,MAAMC,OAAO,CAAEoB,GAAD,IAASC,IAAI,CAACC,GAAL,CAASF,GAAG,GAAG,CAAf,EAAkB,CAAlB,CAAV,CADxB;AAEE,QAAA,QAAQ,EAAErB,IAAI,KAAK,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE;AACE,QAAA,OAAO,EAAE,MAAM;AACb,cAAI,CAACU,cAAD,IAAmBL,IAAI,CAACmB,OAA5B,EAAqC;AACnCvB,YAAAA,OAAO,CAAEoB,GAAD,IAASA,GAAG,GAAG,CAAhB,CAAP;AACD;AACF,SALH;AAME,QAAA,QAAQ,EAAEX,cAAc,IAAI,CAACL,IAAI,CAACmB,OANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CAxDD;;AA0DA,OAAO,MAAMC,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACvE,SAAO;AACLC,IAAAA,KAAK,EAAE;AACL5B,MAAAA,SAAS,EAAE2B,OAAO,CAACE,MAAR,CAAe7B;AADrB;AADF,GAAP;AAKD,CANM;AAQP,eAAeD,iBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { GetServerSideProps } from \"next\";\n\nimport host from \"../../utils/host\";\nimport { CommunityPostsType } from \"../../utils/types/postType\";\n\ninterface Props {\n  community: string;\n}\n\nconst CommunityPostPage: React.FC<Props> = ({ community }) => {\n  const [page, setPage] = useState<number>(1);\n\n  const fetchPosts = async (page: number) => {\n    const res = await fetch(\n      `${host}/communities/${community}/posts?page=${page}&limit=10`\n    );\n    const data: CommunityPostsType = await res.json();\n    return data;\n  };\n\n  const { isLoading, isError, error, data, isPreviousData } = useQuery<\n    CommunityPostsType,\n    Error\n  >([\"community-posts\", page], () => fetchPosts(page), {\n    keepPreviousData: true,\n  });\n\n  return (\n    <React.Fragment>\n      <div>\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>{error.message}</div>\n        ) : (\n          data.posts.map((post) => (\n            <div key={post.uuid}>\n              <p>{post.title}</p>\n              <p>{post.body}</p>\n              <p>{post.user.username}</p>\n            </div>\n          ))\n        )}\n      </div>\n      <div className=\"page-handlers\">\n        <p className=\"current-page\">Current Page: {page}</p>\n        <button\n          onClick={() => setPage((old) => Math.max(old - 1, 0))}\n          disabled={page === 1}\n        >\n          Previous Page\n        </button>\n        <button\n          onClick={() => {\n            if (!isPreviousData && data.hasMore) {\n              setPage((old) => old + 1);\n            }\n          }}\n          disabled={isPreviousData || !data.hasMore}\n        >\n          Next Page\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  return {\n    props: {\n      community: context.params.community,\n    },\n  };\n};\n\nexport default CommunityPostPage;\n"]},"metadata":{},"sourceType":"module"}