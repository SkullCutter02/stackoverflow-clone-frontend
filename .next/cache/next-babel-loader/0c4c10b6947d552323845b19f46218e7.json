{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/questions/[uuid]/index.tsx\";\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../../utils/host\";\nimport Question from \"../../../components/Question\";\n\nconst QuestionPage = ({\n  uuid\n}) => {\n  const fetchQuestions = async () => {\n    const res = await fetch(`${host}/posts/${uuid}`);\n    return await res.json();\n  };\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data\n  } = useQuery([\"individual-question\"], () => fetchQuestions(), {\n    cacheTime: 0\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Question, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  return {\n    props: {\n      uuid: context.params.uuid\n    }\n  };\n};\nexport default QuestionPage;","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/questions/[uuid]/index.tsx"],"names":["React","useQuery","host","Question","QuestionPage","uuid","fetchQuestions","res","fetch","json","isLoading","isError","error","data","cacheTime","message","getServerSideProps","context","props","params"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,OAAOC,IAAP,MAAiB,qBAAjB;AAEA,OAAOC,QAAP,MAAqB,8BAArB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACjC,QAAMC,cAAc,GAAG,YAAY;AACjC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,UAASG,IAAK,EAAvB,CAAvB;AACA,WAAO,MAAME,GAAG,CAACE,IAAJ,EAAb;AACD,GAHD;;AAKA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,MAAsCZ,QAAQ,CAClD,CAAC,qBAAD,CADkD,EAElD,MAAMK,cAAc,EAF8B,EAGlD;AAAEQ,IAAAA,SAAS,EAAE;AAAb,GAHkD,CAApD;AAMA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAA,gBACGJ,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ,GAENC,OAAO,gBACT;AAAA,kBAAMC,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,cADS,gBAGT,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEF;AAAhB;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAzBD;;AA2BA,OAAO,MAAMG,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACvE,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLb,MAAAA,IAAI,EAAEY,OAAO,CAACE,MAAR,CAAed;AADhB;AADF,GAAP;AAKD,CANM;AAQP,eAAeD,YAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { GetServerSideProps } from \"next\";\n\nimport host from \"../../../utils/host\";\nimport { QuestionType } from \"../../../utils/types/individualQuestionType\";\nimport Question from \"../../../components/Question\";\n\nconst QuestionPage = ({ uuid }) => {\n  const fetchQuestions = async () => {\n    const res = await fetch(`${host}/posts/${uuid}`);\n    return await res.json();\n  };\n\n  const { isLoading, isError, error, data } = useQuery<QuestionType, Error>(\n    [\"individual-question\"],\n    () => fetchQuestions(),\n    { cacheTime: 0 }\n  );\n\n  return (\n    <React.Fragment>\n      <main>\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>{error.message}</div>\n        ) : (\n          <Question data={data} />\n        )}\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  return {\n    props: {\n      uuid: context.params.uuid,\n    },\n  };\n};\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}