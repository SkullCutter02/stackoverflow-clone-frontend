{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/user/[username]/index.tsx\";\nimport React, { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../../utils/host\";\nimport { UserContext } from \"../../../context/UserContext\";\n\nconst UserProfilePage = ({\n  username\n}) => {\n  const userContext = useContext(UserContext);\n\n  const fetchUser = async () => {\n    const res = await fetch(`${host}/users/${username}`);\n    return await res.json();\n  };\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data\n  } = useQuery(\"user\", () => fetchUser(), {\n    cacheTime: 0\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: isLoading && !userContext.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: data.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  return {\n    props: {\n      username: context.query.username\n    }\n  };\n};\nexport default UserProfilePage;","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/user/[username]/index.tsx"],"names":["React","useContext","useQuery","host","UserContext","UserProfilePage","username","userContext","fetchUser","res","fetch","json","isLoading","isError","error","data","cacheTime","user","message","getServerSideProps","context","props","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,WAAT,QAA4B,8BAA5B;;AAiBA,MAAMC,eAAgC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzD,QAAMC,WAAW,GAAGN,UAAU,CAACG,WAAD,CAA9B;;AAEA,QAAMI,SAAS,GAAG,YAAY;AAC5B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEP,IAAK,UAASG,QAAS,EAA3B,CAAvB;AACA,WAAO,MAAMG,GAAG,CAACE,IAAJ,EAAb;AACD,GAHD;;AAKA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,MAAsCb,QAAQ,CAClD,MADkD,EAElD,MAAMM,SAAS,EAFmC,EAGlD;AAAEQ,IAAAA,SAAS,EAAE;AAAb,GAHkD,CAApD;AAMA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,cACGJ,SAAS,IAAI,CAACL,WAAW,CAACU,IAA1B,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAEGJ,OAAO,gBACT;AAAA,4BAAaC,KAAK,CAACI,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YADS,gBAGT;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE;AAAA,kBAAKH,IAAI,CAACT;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA3BD;;AA6BA,OAAO,MAAMa,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AACvE,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLf,MAAAA,QAAQ,EAAEc,OAAO,CAACE,KAAR,CAAchB;AADnB;AADF,GAAP;AAKD,CANM;AAQP,eAAeD,eAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { GetServerSideProps } from \"next\";\n\nimport host from \"../../../utils/host\";\nimport { UserContext } from \"../../../context/UserContext\";\n\ntype UserType = {\n  uuid: string;\n  username: string;\n  email: string;\n  verified: boolean;\n  reputation: number;\n  role: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\ninterface Props {\n  username: string;\n}\n\nconst UserProfilePage: React.FC<Props> = ({ username }) => {\n  const userContext = useContext(UserContext);\n\n  const fetchUser = async () => {\n    const res = await fetch(`${host}/users/${username}`);\n    return await res.json();\n  };\n\n  const { isLoading, isError, error, data } = useQuery<UserType, Error>(\n    \"user\",\n    () => fetchUser(),\n    { cacheTime: 0 }\n  );\n\n  return (\n    <React.Fragment>\n      {isLoading && !userContext.user ? (\n        <div>Loading...</div>\n      ) : isError ? (\n        <div>Error: {error.message}</div>\n      ) : (\n        <div className=\"user-container\">\n          <h1>{data.username}</h1>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  return {\n    props: {\n      username: context.query.username,\n    },\n  };\n};\n\nexport default UserProfilePage;\n"]},"metadata":{},"sourceType":"module"}