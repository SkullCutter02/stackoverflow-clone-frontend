{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/Communities.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport host from \"../utils/host\";\n\nvar Communities = function Communities() {\n  _s();\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var fetchCommunities = function fetchCommunities() {\n    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return fetch(\"\".concat(host, \"/communities?page=\").concat(page, \"&limit=20\"));\n  };\n\n  var _useQuery = useQuery([\"communities\", page], function () {\n    return fetchCommunities(page);\n  }, {\n    keepPreviousData: true\n  }),\n      isLoading = _useQuery.isLoading,\n      isError = _useQuery.isError,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      isFetching = _useQuery.isFetching,\n      isPreviousData = _useQuery.isPreviousData;\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"communities-container\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, _this) : isError ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Communities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Communities, \"ROZZXDCpSyTccMsQYEDldIx7+gA=\", false, function () {\n  return [useQuery];\n});\n\n_c = Communities;\nexport default Communities;\n\nvar _c;\n\n$RefreshReg$(_c, \"Communities\");","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/components/Communities.tsx"],"names":["React","useState","useQuery","host","Communities","page","setPage","fetchCommunities","fetch","keepPreviousData","isLoading","isError","error","data","isFetching","isPreviousData","message"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,eAAjB;;AAOA,IAAMC,WAAqB,GAAG,SAAxBA,WAAwB,GAAM;AAAA;;AAAA,kBACVH,QAAQ,CAAS,CAAT,CADE;AAAA,MAC3BI,IAD2B;AAAA,MACrBC,OADqB;;AAGlC,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,QAACF,IAAD,uEAAgB,CAAhB;AAAA,WACvBG,KAAK,WAAIL,IAAJ,+BAA6BE,IAA7B,eADkB;AAAA,GAAzB;;AAHkC,kBAa9BH,QAAQ,CAAC,CAAC,aAAD,EAAgBG,IAAhB,CAAD,EAAwB;AAAA,WAAME,gBAAgB,CAACF,IAAD,CAAtB;AAAA,GAAxB,EAAsD;AAChEI,IAAAA,gBAAgB,EAAE;AAD8C,GAAtD,CAbsB;AAAA,MAOhCC,SAPgC,aAOhCA,SAPgC;AAAA,MAQhCC,OARgC,aAQhCA,OARgC;AAAA,MAShCC,KATgC,aAShCA,KATgC;AAAA,MAUhCC,IAVgC,aAUhCA,IAVgC;AAAA,MAWhCC,UAXgC,aAWhCA,UAXgC;AAAA,MAYhCC,cAZgC,aAYhCA,cAZgC;;AAiBlC,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,gBACGL,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADQ,GAENC,OAAO,gBACT;AAAA,8BAAaC,KAAK,CAACI,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,eADS,gBAGT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAaD,CA9BD;;GAAMZ,W;UAaAF,Q;;;KAbAE,W;AAgCN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../utils/host\";\n\ntype CommunityType = {\n  uuid: string;\n  name: string;\n};\n\nconst Communities: React.FC = () => {\n  const [page, setPage] = useState<number>(1);\n\n  const fetchCommunities = (page: number = 1) =>\n    fetch(`${host}/communities?page=${page}&limit=20`);\n\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    isFetching,\n    isPreviousData,\n  } = useQuery([\"communities\", page], () => fetchCommunities(page), {\n    keepPreviousData: true,\n  });\n\n  return (\n    <React.Fragment>\n      <div className=\"communities-container\">\n        {isLoading ? (\n          <div>Loading...</div>\n        ) : isError ? (\n          <div>Error: {error.message}</div>\n        ) : (\n          <div>Communities</div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Communities;\n"]},"metadata":{},"sourceType":"module"}