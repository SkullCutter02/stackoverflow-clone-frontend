{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\nimport host from \"../../utils/host\";\n\nvar CommunityPostPage = function CommunityPostPage() {\n  _s();\n\n  var _useState = useState(\"\"),\n      uuid = _useState[0],\n      setUuid = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  var router = useRouter();\n  var community = router.query.community;\n\n  var fetchPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(page) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(host, \"/communities/\").concat(uuid, \"/posts?page=\").concat(page, \"&limit=10\"));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchPosts(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (uuid) {\n    var _useQuery = useQuery([\"community-posts\", page], function () {\n      return fetchPosts(page);\n    }, {\n      keepPreviousData: true\n    }),\n        isLoading = _useQuery.isLoading,\n        isError = _useQuery.isError,\n        error = _useQuery.error,\n        _data = _useQuery.data,\n        isFetching = _useQuery.isFetching,\n        isPreviousData = _useQuery.isPreviousData;\n  }\n\n  console.log(data);\n  useEffect(function () {\n    setUuid(localStorage.getItem(\"communityUuid\"));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: community\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(CommunityPostPage, \"rDSY/PMHL8C1UgjWw9u4+E5yBe8=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = CommunityPostPage;\nexport default CommunityPostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommunityPostPage\");","map":{"version":3,"sources":["/Users/skullcutter/WebStormProjects/stackoverflow-clone/frontend/pages/[community]/index.tsx"],"names":["React","useEffect","useState","useRouter","useQuery","host","CommunityPostPage","uuid","setUuid","page","setPage","router","community","query","fetchPosts","fetch","res","json","keepPreviousData","isLoading","isError","error","data","isFetching","isPreviousData","console","log","localStorage","getItem"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,IAAP,MAAiB,kBAAjB;;AAGA,IAAMC,iBAA2B,GAAG,SAA9BA,iBAA8B,GAAM;AAAA;;AAAA,kBAChBJ,QAAQ,CAAS,EAAT,CADQ;AAAA,MACjCK,IADiC;AAAA,MAC3BC,OAD2B;;AAAA,mBAEhBN,QAAQ,CAAS,CAAT,CAFQ;AAAA,MAEjCO,IAFiC;AAAA,MAE3BC,OAF2B;;AAGxC,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AAHwC,MAIhCS,SAJgC,GAIlBD,MAAM,CAACE,KAJW,CAIhCD,SAJgC;;AAMxC,MAAME,UAAU;AAAA,wEAAG,iBAAOL,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACCM,KAAK,WAClBV,IADkB,0BACEE,IADF,yBACqBE,IADrB,eADN;;AAAA;AACXO,cAAAA,GADW;AAAA;AAAA,qBAIJA,GAAG,CAACC,IAAJ,EAJI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVH,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAOA,MAAIP,IAAJ,EAAU;AAAA,oBAQJH,QAAQ,CACV,CAAC,iBAAD,EAAoBK,IAApB,CADU,EAEV;AAAA,aAAMK,UAAU,CAACL,IAAD,CAAhB;AAAA,KAFU,EAGV;AACES,MAAAA,gBAAgB,EAAE;AADpB,KAHU,CARJ;AAAA,QAENC,SAFM,aAENA,SAFM;AAAA,QAGNC,OAHM,aAGNA,OAHM;AAAA,QAINC,KAJM,aAINA,KAJM;AAAA,QAKNC,KALM,aAKNA,IALM;AAAA,QAMNC,UANM,aAMNA,UANM;AAAA,QAONC,cAPM,aAONA,cAPM;AAeT;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEArB,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,OAAO,CAACmB,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAD,CAAP;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBAAO;AAAA,cAAMhB;AAAN;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CArCD;;GAAMN,iB;UAGWH,S,EAkBTC,Q;;;KArBFE,iB;AAuCN,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"react-query\";\n\nimport host from \"../../utils/host\";\nimport { CommunityPostsType } from \"../../utils/types/postType\";\n\nconst CommunityPostPage: React.FC = () => {\n  const [uuid, setUuid] = useState<string>(\"\");\n  const [page, setPage] = useState<number>(1);\n  const router = useRouter();\n  const { community } = router.query;\n\n  const fetchPosts = async (page: number) => {\n    const res = await fetch(\n      `${host}/communities/${uuid}/posts?page=${page}&limit=10`\n    );\n    return await res.json();\n  };\n\n  if (uuid) {\n    const {\n      isLoading,\n      isError,\n      error,\n      data,\n      isFetching,\n      isPreviousData,\n    } = useQuery<CommunityPostsType, Error>(\n      [\"community-posts\", page],\n      () => fetchPosts(page),\n      {\n        keepPreviousData: true,\n      }\n    );\n  }\n\n  console.log(data);\n\n  useEffect(() => {\n    setUuid(localStorage.getItem(\"communityUuid\"));\n  }, []);\n\n  return <div>{community}</div>;\n};\n\nexport default CommunityPostPage;\n"]},"metadata":{},"sourceType":"module"}